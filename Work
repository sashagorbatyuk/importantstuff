// –ó–∞–≤–¥–∞–Ω–Ω—è 1: –û–±'—î–∫—Ç –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
const car = {
    brand: "Tesla",
    model: "Model S",
    averageSpeed: 90, // –∫–º/–≥–æ–¥

    displayInfo() {
        console.log(`–ú–∞—Ä–∫–∞: ${this.brand}, –ú–æ–¥–µ–ª—å: ${this.model}, –°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å: ${this.averageSpeed} –∫–º/–≥–æ–¥`);
    },

    calculateTravelTime(distance) {
        const travelHours = distance / this.averageSpeed;
        const breaks = Math.floor(travelHours / 4);
        const totalTime = travelHours + breaks;
        console.log(`–î–ª—è –ø–æ–¥–æ–ª–∞–Ω–Ω—è ${distance} –∫–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ø—Ä–∏–±–ª–∏–∑–Ω–æ ${totalTime.toFixed(2)} –≥–æ–¥–∏–Ω (–≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –ø–µ—Ä–µ—Ä–≤–∏).`);
        return totalTime;
    }
};

// –ó–∞–≤–¥–∞–Ω–Ω—è 2: –û–±'—î–∫—Ç –¥—Ä–æ–±—É
const fraction = (numerator, denominator) => ({
    numerator,
    denominator,

    add(other) {
        const newNumerator = this.numerator * other.denominator + other.numerator * this.denominator;
        const newDenominator = this.denominator * other.denominator;
        return fraction(newNumerator, newDenominator).reduce();
    },

    subtract(other) {
        const newNumerator = this.numerator * other.denominator - other.numerator * this.denominator;
        const newDenominator = this.denominator * other.denominator;
        return fraction(newNumerator, newDenominator).reduce();
    },

    multiply(other) {
        const newNumerator = this.numerator * other.numerator;
        const newDenominator = this.denominator * other.denominator;
        return fraction(newNumerator, newDenominator).reduce();
    },

    divide(other) {
        const newNumerator = this.numerator * other.denominator;
        const newDenominator = this.denominator * other.numerator;
        return fraction(newNumerator, newDenominator).reduce();
    },

    reduce() {
        const gcd = (a, b) => (b === 0 ? a : gcd(b, a % b));
        const commonDivisor = gcd(this.numerator, this.denominator);
        return fraction(this.numerator / commonDivisor, this.denominator / commonDivisor);
    },

    display() {
        console.log(`${this.numerator}/${this.denominator}`);
    }
});

// –ó–∞–≤–¥–∞–Ω–Ω—è 3: –û–±'—î–∫—Ç —á–∞—Å—É
const time = {
    hours: 0,
    minutes: 0,
    seconds: 0,

    displayTime() {
        console.log(`${String(this.hours).padStart(2, '0')}:${String(this.minutes).padStart(2, '0')}:${String(this.seconds).padStart(2, '0')}`);
    },

    addSeconds(seconds) {
        let totalSeconds = this.hours * 3600 + this.minutes * 60 + this.seconds + seconds;
        this.updateFromTotalSeconds(totalSeconds);
    },

    addMinutes(minutes) {
        this.addSeconds(minutes * 60);
    },

    addHours(hours) {
        this.addSeconds(hours * 3600);
    },

    updateFromTotalSeconds(totalSeconds) {
        totalSeconds = ((totalSeconds % 86400) + 86400) % 86400; // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º—É —á–∞—Å—É
        this.hours = Math.floor(totalSeconds / 3600);
        this.minutes = Math.floor((totalSeconds % 3600) / 60);
        this.seconds = totalSeconds % 60;
    }
};


–ö–æ–¥ —Ä–µ–∞–ª—ñ–∑—É—î —Ç—Ä–∏ –æ–±'—î–∫—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å:

1. –û–±'—î–∫—Ç –∞–≤—Ç–æ–º–æ–±—ñ–ª—è: –ú—ñ—Å—Ç–∏—Ç—å –º–µ—Ç–æ–¥–∏ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–≤—Ç–æ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —á–∞—Å—É –ø–æ–¥–æ—Ä–æ–∂—ñ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–µ—Ä–µ—Ä–≤.


2. –û–±'—î–∫—Ç –¥—Ä–æ–±—É: –û–ø–µ—Ä–∞—Ü—ñ—ó –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è, –º–Ω–æ–∂–µ–Ω–Ω—è, –¥—ñ–ª–µ–Ω–Ω—è, –∞ —Ç–∞–∫–æ–∂ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –¥—Ä–æ–±—ñ–≤.


3. –û–±'—î–∫—Ç —á–∞—Å—É: –†–µ–∞–ª—ñ–∑—É—î –∑–º—ñ–Ω—É —á–∞—Å—É (—Å–µ–∫—É–Ω–¥–∏, —Ö–≤–∏–ª–∏–Ω–∏, –≥–æ–¥–∏–Ω–∏) –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—è.



–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∫–æ—Ä–µ–∫—Ç–∏–≤–∏ –∞–±–æ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ‚Äî –ø–æ–≤—ñ–¥–æ–º—Ç–µ! üòä

